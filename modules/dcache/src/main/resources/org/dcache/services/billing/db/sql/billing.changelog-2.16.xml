<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
				       http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.29.xsd">

    <changeSet id="1" author="litvinse">
        <comment>create primary key on billinginfo_rd_daily</comment>
	<addPrimaryKey columnNames="date" constraintName="billinginfo_rd_daily_pkey" tableName="billinginfo_rd_daily"/>
	<rollback>
	<dropPrimaryKey constraintName="billinginfo_rd_daily_pkey" tableName="billinginfo_rd_daily"/>
	</rollback>
    </changeSet>

    <changeSet id="2" author="litvinse">
        <comment>create primary key on billinginfo_wr_daily</comment>
	<addPrimaryKey columnNames="date" constraintName="billinginfo_wr_daily_pkey" tableName="billinginfo_wr_daily"/>
	<rollback>
	<dropPrimaryKey constraintName="billinginfo_wr_daily_pkey" tableName="billinginfo_wr_daily"/>
	</rollback>
    </changeSet>

    <changeSet id="3" author="litvinse">
        <comment>create primary key on billinginfo_p2p_daily</comment>
	<addPrimaryKey columnNames="date" constraintName="billinginfo_p2p_daily_pkey" tableName="billinginfo_p2p_daily"/>
	<rollback>
	<dropPrimaryKey constraintName="billinginfo_p2p_daily_pkey" tableName="billinginfo_p2p_daily"/>
	</rollback>
    </changeSet>

    <changeSet id="4" author="litvinse">
        <comment>create primary key on billinginfo_tm_daily</comment>
	<addPrimaryKey columnNames="date" constraintName="billinginfo_tm_daily_pkey" tableName="billinginfo_tm_daily"/>
	<rollback>
	<dropPrimaryKey constraintName="billinginfo_tm_daily_pkey" tableName="billinginfo_tm_daily"/>
	</rollback>
    </changeSet>

    <changeSet id="5" author="litvinse">
        <comment>create primary key on storageinfo_wr_daily</comment>
	<addPrimaryKey columnNames="date" constraintName="storageinfo_wr_daily_pkey" tableName="storageinfo_wr_daily"/>
	<rollback>
	<dropPrimaryKey constraintName="storageinfo_wr_daily_pkey" tableName="storageinfo_wr_daily"/>
	</rollback>
    </changeSet>

    <changeSet id="6" author="litvinse">
        <comment>create primary key on storageinfo_rd_daily</comment>
	<addPrimaryKey columnNames="date" constraintName="storageinfo_rd_daily_pkey" tableName="storageinfo_rd_daily"/>
	<rollback>
	<dropPrimaryKey constraintName="storageinfo_rd_daily_pkey" tableName="storageinfo_rd_daily"/>
	</rollback>
    </changeSet>

    <changeSet id="7" author="litvinse">
        <comment>create primary key on hitinfo_daily</comment>
	<addPrimaryKey columnNames="date" constraintName="hitinfo_daily_pkey" tableName="hitinfo_daily"/>
	<rollback>
	<dropPrimaryKey constraintName="hitinfo_daily_pkey" tableName="hitinfo_daily"/>
	</rollback>
    </changeSet>

    <changeSet id="8.1" author="litvinse">
        <preConditions onError="WARN" onFail="WARN">
            <sqlCheck expectedResult="CREATE LANGUAGE">CREATE LANGUAGE plpgsql</sqlCheck>
        </preConditions>
        <comment>triggers on insert in various fine grained data tables that update data in aggregate tables</comment>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION f_update_billinginfo_wr_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    start_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_wr_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
                  start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
                  INSERT INTO billinginfo_wr_daily (date,count,size,transferred)
                  SELECT date(datestamp) AS d,
                         COUNT(*), coalesce(sum(fullsize),0),
                                   coalesce(sum(transfersize),0)
                  FROM billinginfo
                  WHERE datestamp BETWEEN start_date AND curr_date
                     AND isnew='t'
                     AND errorcode=0
                     AND p2p='f'
                  GROUP BY d RETURNING count INTO counter;

                  IF counter is NULL THEN
                     INSERT INTO billinginfo_wr_daily (date,count,size,transferred)
                         VALUES (start_date,0,0,0);
                  END IF;

	          EXCEPTION WHEN       unique_violation THEN
	             --- do nothing ---
	       END;

	    END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION f_update_billinginfo_rd_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
            start_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_rd_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
                  start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
                  INSERT INTO billinginfo_rd_daily (date,count,size,transferred)
                  SELECT date(datestamp) AS d,
                         COUNT(*), coalesce(sum(fullsize),0),
                                   coalesce(sum(transfersize),0)
                  FROM billinginfo
                  WHERE datestamp BETWEEN start_date AND curr_date
                      AND isnew='f'
                      AND errorcode=0
                      AND p2p = 'f'
                  GROUP BY d RETURNING count INTO counter;

                  IF counter is NULL THEN
                     INSERT INTO billinginfo_rd_daily (date,count,size,transferred)
                     VALUES (start_date,0,0,0);
                  END IF;

	          EXCEPTION WHEN       unique_violation THEN
	             --- do nothing ---
               END;

	    END IF;

            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">
	    CREATE OR REPLACE FUNCTION f_update_billinginfo_p2p_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
            start_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_p2p_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
	          start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
                  INSERT INTO billinginfo_p2p_daily (date,count,size,transferred)
                  SELECT date(datestamp) AS d,
                         COUNT(*), coalesce(sum(fullsize),0),
                                    coalesce(sum(transfersize),0)
                  FROM billinginfo
                  WHERE datestamp BETWEEN start_date AND curr_date
                      AND errorcode=0
                      AND p2p='t'
                  GROUP BY d RETURNING count INTO counter;

                  IF counter is NULL THEN
                     INSERT INTO billinginfo_p2p_daily (date,count,size,transferred)
                     VALUES (start_date,0,0,0);
                  END IF;

	          EXCEPTION WHEN       unique_violation THEN
	             --- do nothing ---
               END;

	    END IF;

            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">
	    CREATE OR REPLACE FUNCTION f_update_billinginfo_tm_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    start_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_tm_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
	          start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
                  INSERT INTO billinginfo_tm_daily (date,count,minimum,maximum,average)
                  SELECT date(datestamp) AS d,
                         COUNT(*), min(connectiontime),
                                   max(connectiontime),
                                   avg(connectiontime)
                  FROM billinginfo
                  WHERE datestamp BETWEEN start_date AND curr_date
                      AND errorcode=0
                  GROUP BY d RETURNING count INTO counter;

                  IF counter is NULL THEN
                     INSERT INTO billinginfo_tm_daily (date,count,minimum,maximum,average)
                     VALUES (start_date,0,0,0,0);
                  END IF;

                  EXCEPTION WHEN       unique_violation THEN
	             --- do nothing ---
               END;

	    END IF;

            RETURN NULL;
            END;
            $$
            LANGUAGE
            plpgsql;
        </sql>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION f_update_storageinfo_rd_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    start_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM storageinfo_rd_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
	          start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
                  INSERT INTO storageinfo_rd_daily (date,count,size)
                  SELECT date(datestamp) AS d,
                         COUNT(*), coalesce(sum(fullsize),0)
                  FROM storageinfo
                  WHERE datestamp BETWEEN start_date AND curr_date
                      AND action='restore'
                      AND errorcode=0
                  GROUP BY d RETURNING count INTO counter;

                  IF counter is NULL THEN
                     INSERT INTO storageinfo_rd_daily (date,count,size)
                     VALUES (start_date,0,0);
                  END IF;
	          EXCEPTION WHEN       unique_violation THEN
	             --- do nothing ---
               END;

            END IF;

            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">
	    CREATE OR REPLACE FUNCTION f_update_storageinfo_wr_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    start_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM storageinfo_wr_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
	          start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
                  INSERT INTO storageinfo_wr_daily (date,count,size)
                  SELECT date(datestamp) AS d,
                         COUNT(*), coalesce(sum(fullsize),0)
                  FROM storageinfo
                  WHERE datestamp BETWEEN start_date AND curr_date
                      AND action='store'
                      AND errorcode=0
                  GROUP BY d RETURNING count INTO counter;

                  IF counter is NULL THEN
                     INSERT INTO storageinfo_wr_daily (date,count,size)
                     VALUES (start_date,0,0);
                  END IF;
	          EXCEPTION WHEN       unique_violation THEN
	             --- do nothing ---
	       END;

            END IF;

            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">
	  CREATE OR REPLACE FUNCTION f_update_hitinfo_daily() RETURNS TRIGGER
            AS $$

            DECLARE
            max_date timestamp;
            curr_date timestamp;
            start_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM hitinfo_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
                  start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
                  INSERT INTO hitinfo_daily(date, count, notcached, cached)
                  SELECT date(datestamp) AS d,
                         COUNT(*), COUNT(nullif(filecached, 't')) AS notcached,
                                        COUNT(nullif(filecached, 'f')) AS cached
                  FROM hitinfo
                  WHERE datestamp BETWEEN start_date AND curr_date
                      AND errorcode=0
                  GROUP BY d RETURNING count INTO counter;

                  IF counter is NULL THEN
                     INSERT INTO hitinfo_daily(date, count, notcached, cached)
                     VALUES (start_date,0,0,0);
                  END IF;
	          EXCEPTION WHEN       unique_violation THEN
	             --- do nothing ---
	       END;

            END IF;

            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <rollback/>
    </changeSet>

    <changeSet id="9" author="litvinse"  dbms="postgresql">
        <comment>drop aggregation triggers from fine grained tables</comment>

        <sql>
	    DROP TRIGGER tgr_update_billinginfo_rd_daily on billinginfo;
	    DROP TRIGGER tgr_update_billinginfo_wr_daily on billinginfo;
	    DROP TRIGGER tgr_update_billinginfo_tm_daily on billinginfo;
            DROP TRIGGER tgr_update_billinginfo_p2p_daily on billinginfo;
	    DROP TRIGGER tgr_update_storageinfo_wr_daily on storageinfo;
	    DROP TRIGGER tgr_update_storageinfo_rd_daily on storageinfo;
	    DROP TRIGGER tgr_update_hitinfo_daily on hitinfo;

	    DROP FUNCTION f_update_billinginfo_wr_daily();
	    DROP FUNCTION f_update_billinginfo_rd_daily();
	    DROP FUNCTION f_update_billinginfo_p2p_daily();
	    DROP FUNCTION f_update_billinginfo_tm_daily();
	    DROP FUNCTION f_update_storageinfo_rd_daily();
	    DROP FUNCTION f_update_storageinfo_wr_daily();
	    DROP FUNCTION f_update_hitinfo_daily();

	</sql>

        <createProcedure>
            CREATE OR REPLACE FUNCTION f_update_billinginfo_daily() RETURNS VOID
            AS $$
            DECLARE
            max_date   timestamp;
            curr_date  timestamp;
	    start_date timestamp;
	    read_count  numeric;
	    read_transferred numeric;
	    read_size  numeric;
	    write_count numeric;
	    write_transferred numeric;
	    write_size  numeric;
	    p2p_count numeric;
	    p2p_transferred numeric;
	    p2p_size  numeric;
	    min_time bigint;
	    max_time bigint;
	    avg_time numeric;

            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_wr_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
                  start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
	          INSERT INTO billinginfo_wr_daily (date,count,size,transferred)
	             VALUES (start_date,0,0,0);
	       EXCEPTION WHEN unique_violation THEN
	          RETURN;
	       END;

               SELECT COALESCE(sum(CASE WHEN p2p=true THEN 1 ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN p2p=true THEN transfersize ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN p2p=true THEN fullsize ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN p2p=false AND isnew=true THEN 1 ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN p2p=false AND isnew=true THEN transfersize ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN p2p=false AND isnew=true THEN fullsize ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN p2p=false AND isnew=false THEN 1 ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN p2p=false AND isnew=false THEN transfersize ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN p2p=false AND isnew=false THEN fullsize ELSE 0 END),0),
                      COALESCE(min(CASE WHEN p2p=false THEN connectiontime END),0),
                      COALESCE(max(CASE WHEN p2p=false THEN connectiontime END),0),
                      COALESCE(avg(CASE WHEN p2p=false THEN connectiontime END),0)
               INTO p2p_count, p2p_transferred, p2p_size,
                    write_count, write_transferred, write_size,
                    read_count, read_transferred, read_size,
                    min_time, max_time, avg_time
               FROM billinginfo
               WHERE date(datestamp) = start_date
               AND errorcode = 0;

               UPDATE billinginfo_wr_daily
               SET count=write_count,
                               size=write_size,
                                          transferred=write_transferred
               WHERE date = start_date;

	       BEGIN
                  INSERT INTO billinginfo_rd_daily(date,count,size,transferred)
                     VALUES(start_date,read_count,read_size,read_transferred);
	       EXCEPTION WHEN unique_violation THEN
                  --- ignore
	       END;

	       BEGIN
                  INSERT INTO billinginfo_p2p_daily(date,count,size,transferred)
                     VALUES(start_date,p2p_count,p2p_size,p2p_transferred);
               EXCEPTION WHEN unique_violation THEN
                  --- ignore
               END;

               BEGIN
                  INSERT INTO billinginfo_tm_daily(date,count,minimum,maximum,average)
                     VALUES(start_date,read_count+write_count,min_time,max_time,avg_time);
               EXCEPTION WHEN unique_violation THEN
	             --- ignore
               END;

	    END IF;
            END;
            $$
            LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION f_update_storageinfo_daily() RETURNS VOID
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    start_date timestamp;
	    restore_count numeric;
	    restore_bytes numeric;
	    store_count numeric;
	    store_bytes numeric;

            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM storageinfo_rd_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
	          start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
                  INSERT INTO storageinfo_rd_daily (date,count,size)
                     VALUES (start_date,0,0);
	       EXCEPTION WHEN unique_violation THEN
	          RETURN;
	       END;

               SELECT COALESCE(sum(CASE WHEN action='store'   THEN 1 ELSE 0 END),0),
                      COALESCE(sum(CASE WHEN action='store'   THEN fullsize ELSE 0 END),0),
	              COALESCE(sum(CASE WHEN action='restore' THEN 1 ELSE 0 END),0),
	              COALESCE(sum(CASE WHEN action='restore' THEN fullsize ELSE 0 END),0)
               INTO store_count, store_bytes,
	            restore_count, restore_bytes
               FROM storageinfo
               WHERE date(datestamp) = start_date
               AND errorcode = 0;


               UPDATE storageinfo_rd_daily
               SET count=restore_count,
                               size=restore_bytes
               WHERE date = start_date;

               BEGIN
	          INSERT INTO storageinfo_wr_daily(date,count,size)
                     VALUES(start_date,store_count,store_bytes);
	       EXCEPTION WHEN unique_violation THEN
                  --- ignore
               END;

            END IF;

            END;
            $$
            LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
	    CREATE OR REPLACE FUNCTION f_update_hitinfo_daily() RETURNS VOID
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
            start_date timestamp;

            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM hitinfo_daily;

	    IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

               IF max_date IS NULL THEN
                  start_date := curr_date - interval'1 day';
               ELSE
                  start_date := max_date+interval'1 day';
               END IF;

	       BEGIN
	          INSERT INTO hitinfo_daily(date, count, notcached, cached)
                     VALUES (start_date,0,0,0);
	       EXCEPTION WHEN unique_violation THEN
	          RETURN;
	       END;

               UPDATE hitinfo_daily
               SET count=dummy.count,
                               notcached=dummy.notcached,
                                          cached=dummy.cached

               FROM
                  (SELECT COUNT(*) AS count,
                          COUNT(nullif(filecached, 't')) AS notcached,
	                   COUNT(nullif(filecached, 'f')) AS cached
                   FROM hitinfo
                   WHERE date(datestamp) = start_date
                      AND errorcode=0) AS dummy
               WHERE date = start_date;

            END IF;
            END;
            $$
            LANGUAGE plpgsql;
        </createProcedure>

        <createProcedure>
	  CREATE OR REPLACE FUNCTION f_billing_daily_summary() RETURNS VOID
                AS $$
                BEGIN
	           PERFORM f_update_billinginfo_daily();
	           PERFORM f_update_storageinfo_daily();
	           PERFORM f_update_hitinfo_daily();
                END;
                $$
                LANGUAGE plpgsql;
        </createProcedure>

	<rollback>
	    <sql>
	      drop function f_update_hitinfo_daily();
	      drop function f_update_storageinfo_daily();
	      drop function f_update_billinginfo_daily();
	      drop function f_billing_daily_summary();
	    </sql>
	    <createProcedure>
                CREATE OR REPLACE FUNCTION f_update_billinginfo_wr_daily() RETURNS TRIGGER
                AS $$
                DECLARE
                max_date timestamp;
                curr_date timestamp;
                start_date timestamp;
                counter bigint;
                BEGIN
                curr_date := current_date;
                SELECT max(date) into max_date FROM billinginfo_wr_daily;

                IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

                   IF max_date IS NULL THEN
                      start_date := curr_date - interval'1 day';
                   ELSE
                      start_date := max_date+interval'1 day';
                   END IF;

                   BEGIN
                      INSERT INTO billinginfo_wr_daily (date,count,size,transferred)
                      SELECT date(datestamp) AS d,
                             COUNT(*), coalesce(sum(fullsize),0),
                                       coalesce(sum(transfersize),0)
                      FROM billinginfo
                      WHERE datestamp BETWEEN start_date AND curr_date
                         AND isnew='t'
                         AND errorcode=0
                         AND p2p='f'
                      GROUP BY d RETURNING count INTO counter;

                      IF counter is NULL THEN
                         INSERT INTO billinginfo_wr_daily (date,count,size,transferred)
                             VALUES (start_date,0,0,0);
                      END IF;

                      EXCEPTION WHEN       unique_violation THEN
                         --- do nothing ---
                   END;

                END IF;
                RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                CREATE TRIGGER tgr_update_billinginfo_wr_daily AFTER INSERT ON billinginfo
                FOR EACH ROW EXECUTE PROCEDURE f_update_billinginfo_wr_daily();
            </createProcedure>

	    <createProcedure>
                CREATE OR REPLACE FUNCTION f_update_billinginfo_rd_daily() RETURNS TRIGGER
                AS $$
                DECLARE
                max_date timestamp;
                curr_date timestamp;
                start_date timestamp;
                counter bigint;
                BEGIN
                curr_date := current_date;
                SELECT max(date) into max_date FROM billinginfo_rd_daily;

                IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

                   IF max_date IS NULL THEN
                      start_date := curr_date - interval'1 day';
                   ELSE
                      start_date := max_date+interval'1 day';
                   END IF;

		   BEGIN
                      INSERT INTO billinginfo_rd_daily (date,count,size,transferred)
                      SELECT date(datestamp) AS d,
                             COUNT(*), coalesce(sum(fullsize),0),
                                       coalesce(sum(transfersize),0)
                      FROM billinginfo
                      WHERE datestamp BETWEEN start_date AND curr_date
                          AND isnew='f'
                          AND errorcode=0
                          AND p2p = 'f'
                      GROUP BY d RETURNING count INTO counter;

                      IF counter is NULL THEN
                         INSERT INTO billinginfo_rd_daily (date,count,size,transferred)
                         VALUES (start_date,0,0,0);
                      END IF;

                      EXCEPTION WHEN       unique_violation THEN
                         --- do nothing ---
                   END;

                END IF;
                RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                CREATE TRIGGER tgr_update_billinginfo_rd_daily AFTER INSERT ON billinginfo
                FOR EACH ROW EXECUTE PROCEDURE f_update_billinginfo_rd_daily();
	    </createProcedure>

	    <createProcedure>
                CREATE OR REPLACE FUNCTION f_update_billinginfo_p2p_daily() RETURNS TRIGGER
                AS $$
                DECLARE
                max_date timestamp;
                curr_date timestamp;
                start_date timestamp;
                counter bigint;
                BEGIN
                curr_date := current_date;
                SELECT max(date) into max_date FROM billinginfo_p2p_daily;

                IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

                   IF max_date IS NULL THEN
                      start_date := curr_date - interval'1 day';
                   ELSE
                      start_date := max_date+interval'1 day';
                   END IF;

                   BEGIN
                      INSERT INTO billinginfo_p2p_daily (date,count,size,transferred)
                      SELECT date(datestamp) AS d,
                             COUNT(*), coalesce(sum(fullsize),0),
                                        coalesce(sum(transfersize),0)
                      FROM billinginfo
                      WHERE datestamp BETWEEN start_date AND curr_date
                          AND errorcode=0
                          AND p2p='t'
                      GROUP BY d RETURNING count INTO counter;

                      IF counter is NULL THEN
                         INSERT INTO billinginfo_p2p_daily (date,count,size,transferred)
                         VALUES (start_date,0,0,0);
                      END IF;

                      EXCEPTION WHEN       unique_violation THEN
                         --- do nothing ---
                   END;

                END IF;
                RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                CREATE TRIGGER tgr_update_billinginfo_p2p_daily AFTER INSERT ON billinginfo
                FOR EACH ROW EXECUTE PROCEDURE f_update_billinginfo_p2p_daily();
	    </createProcedure>

	    <createProcedure>
                CREATE OR REPLACE FUNCTION f_update_billinginfo_tm_daily() RETURNS TRIGGER
                AS $$
                DECLARE
                max_date timestamp;
                curr_date timestamp;
                start_date timestamp;
                counter bigint;
                BEGIN
                curr_date := current_date;
                SELECT max(date) into max_date FROM billinginfo_tm_daily;

                IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

                   IF max_date IS NULL THEN
                      start_date := curr_date - interval'1 day';
                   ELSE
                      start_date := max_date+interval'1 day';
                   END IF;

                   BEGIN
                      INSERT INTO billinginfo_tm_daily (date,count,minimum,maximum,average)
                      SELECT date(datestamp) AS d,
                             COUNT(*), min(connectiontime),
                                       max(connectiontime),
                                       avg(connectiontime)
                      FROM billinginfo
                      WHERE datestamp BETWEEN start_date AND curr_date
                          AND errorcode=0
                      GROUP BY d RETURNING count INTO counter;

                      IF counter is NULL THEN
                         INSERT INTO billinginfo_tm_daily (date,count,minimum,maximum,average)
                         VALUES (start_date,0,0,0,0);
                      END IF;

                      EXCEPTION WHEN       unique_violation THEN
                         --- do nothing ---
                   END;

                END IF;
                RETURN NULL;
                END;
                $$
                LANGUAGE
                plpgsql;

                CREATE TRIGGER tgr_update_billinginfo_tm_daily AFTER INSERT ON billinginfo
                FOR EACH ROW EXECUTE PROCEDURE f_update_billinginfo_tm_daily();
	    </createProcedure>

	    <createProcedure>
                CREATE OR REPLACE FUNCTION f_update_storageinfo_rd_daily() RETURNS TRIGGER
                AS $$
                DECLARE
                max_date timestamp;
                curr_date timestamp;
                start_date timestamp;
                counter bigint;
                BEGIN
                curr_date := current_date;
                SELECT max(date) into max_date FROM storageinfo_rd_daily;

                IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

                   IF max_date IS NULL THEN
                      start_date := curr_date - interval'1 day';
                   ELSE
                      start_date := max_date+interval'1 day';
                   END IF;

                   BEGIN
                      INSERT INTO storageinfo_rd_daily (date,count,size)
                      SELECT date(datestamp) AS d,
                             COUNT(*), coalesce(sum(fullsize),0)
                      FROM storageinfo
                      WHERE datestamp BETWEEN start_date AND curr_date
                          AND action='restore'
                          AND errorcode=0
                      GROUP BY d RETURNING count INTO counter;

                      IF counter is NULL THEN
                         INSERT INTO storageinfo_rd_daily (date,count,size)
                         VALUES (start_date,0,0);
                      END IF;
                      EXCEPTION WHEN       unique_violation THEN
                         --- do nothing ---
                   END;
                END IF;
                RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                CREATE TRIGGER tgr_update_storageinfo_rd_daily AFTER INSERT ON storageinfo
                FOR EACH ROW EXECUTE PROCEDURE f_update_storageinfo_rd_daily();
	    </createProcedure>

	    <createProcedure>
                CREATE OR REPLACE FUNCTION f_update_storageinfo_wr_daily() RETURNS TRIGGER
                AS $$
                DECLARE
                max_date timestamp;
                curr_date timestamp;
                start_date timestamp;
                counter bigint;
                BEGIN
                curr_date := current_date;
                SELECT max(date) into max_date FROM storageinfo_wr_daily;

                IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

                   IF max_date IS NULL THEN
                      start_date := curr_date - interval'1 day';
                   ELSE
                      start_date := max_date+interval'1 day';
                   END IF;

		   BEGIN
                      INSERT INTO storageinfo_wr_daily (date,count,size)
                      SELECT date(datestamp) AS d,
                             COUNT(*), coalesce(sum(fullsize),0)
                      FROM storageinfo
                      WHERE datestamp BETWEEN start_date AND curr_date
                          AND action='store'
                          AND errorcode=0
                      GROUP BY d RETURNING count INTO counter;

                      IF counter is NULL THEN
                         INSERT INTO storageinfo_wr_daily (date,count,size)
                         VALUES (start_date,0,0);
                      END IF;
                      EXCEPTION WHEN       unique_violation THEN
                         --- do nothing ---
                   END;
                END IF;
                RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                CREATE TRIGGER tgr_update_storageinfo_wr_daily AFTER INSERT ON storageinfo
                FOR EACH ROW EXECUTE PROCEDURE f_update_storageinfo_wr_daily();
	    </createProcedure>

	    <createProcedure>
                CREATE OR REPLACE FUNCTION f_update_hitinfo_daily() RETURNS TRIGGER
                AS $$

                DECLARE
                max_date timestamp;
                curr_date timestamp;
                start_date timestamp;
                counter bigint;
                BEGIN
                curr_date := current_date;
                SELECT max(date) into max_date FROM hitinfo_daily;

                 IF max_date IS NULL OR curr_date - max_date > interval'1 days' THEN

                   IF max_date IS NULL THEN
                      start_date := curr_date - interval'1 day';
                   ELSE
                      start_date := max_date+interval'1 day';
                   END IF;

                   BEGIN
                      INSERT INTO hitinfo_daily(date, count, notcached, cached)
                      SELECT date(datestamp) AS d,
                             COUNT(*), COUNT(nullif(filecached, 't')) AS notcached,
                                            COUNT(nullif(filecached, 'f')) AS cached
                      FROM hitinfo
                      WHERE datestamp BETWEEN start_date AND curr_date
                          AND errorcode=0
                      GROUP BY d RETURNING count INTO counter;

                      IF counter is NULL THEN
                         INSERT INTO hitinfo_daily(date, count, notcached, cached)
                         VALUES (start_date,0,0,0);
                      END IF;
                      EXCEPTION WHEN       unique_violation THEN
                         --- do nothing ---
                   END;
                END IF;
                RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                CREATE TRIGGER tgr_update_hitinfo_daily AFTER INSERT ON hitinfo
                FOR EACH ROW EXECUTE PROCEDURE f_update_hitinfo_daily();
	    </createProcedure>
	</rollback>
    </changeSet>

</databaseChangeLog>
