<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.29.xsd">

    <changeSet author="behrmann" id="2.2" dbms="postgresql">
        <comment>Drop tag population trigger</comment>
        <sql>
            DROP TRIGGER IF EXISTS tgr_populate_tags ON t_dirs;
            DROP FUNCTION IF EXISTS f_populate_tags();
        </sql>

        <rollback>
            <createProcedure>
                DROP TRIGGER IF EXISTS tgr_populate_tags ON t_dirs;

                ---
                --- populate inhereted tags
                ---
                CREATE OR REPLACE FUNCTION f_populate_tags() RETURNS TRIGGER AS $t_populate_tags$
                BEGIN
                IF TG_OP = 'INSERT' AND NEW.iname = '..'
                THEN
                INSERT INTO t_tags ( SELECT NEW.iparent, itagname, itagid, 0 from t_tags WHERE ipnfsid=NEW.ipnfsid );
                END IF;

                RETURN NEW;
                END;

                $t_populate_tags$ LANGUAGE plpgsql;
                --
                -- trigger to store removed inodes
                --

                CREATE TRIGGER tgr_populate_tags AFTER INSERT ON t_dirs
                FOR EACH ROW EXECUTE PROCEDURE f_populate_tags();
            </createProcedure>
        </rollback>
    </changeSet>

    <changeSet author="behrmann" id="3.1" dbms="postgresql">
        <sql>
            DROP TRIGGER IF EXISTS tgr_insertACL ON t_dirs;
            DROP FUNCTION IF EXISTS f_insertACL();
        </sql>

        <rollback>
            <createProcedure>
                DROP TRIGGER IF EXISTS tgr_insertACL ON t_dirs;

                CREATE OR REPLACE FUNCTION f_insertACL() RETURNS trigger AS $$
                DECLARE
                    msk INTEGER;
                    flag INTEGER;
                    rstype INTEGER;
                    id character varying(36);
                    parentid character varying(36);
                BEGIN
                    msk := 0;
                    SELECT INTO rstype itype FROM t_inodes WHERE ipnfsid = NEW.ipnfsid;

                    IF rstype = 32768  THEN
                        id := NEW.ipnfsid;
                        parentid := NEW.iparent;
                        rstype := 1;    -- inserted object is a file
                        flag := 1;      -- check flags for 'f' bit
                        msk := 11;      -- mask contains 'o','d' and 'f' bits
                    ELSIF (rstype = 16384 AND NEW.iname = '..') THEN
                        id := NEW.iparent;
                        parentid := NEW.ipnfsid;
                        rstype := 0;    -- inserted object is a directory
                        flag := 3;      -- check flags for 'd' and 'f' bits
                        msk := 8;       -- mask contains 'o' bit
                    END IF;

                    IF msk > 0 THEN
                        INSERT INTO t_acl
                            SELECT id, rstype, type, (flags | msk) # msk, access_msk, who, who_id, address_msk, ace_order
                                FROM t_acl
                                    WHERE  rs_id = parentid AND ((flags &amp; flag) > 0);
                    END IF;
                    RETURN NULL;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER tgr_insertACL AFTER INSERT ON t_dirs FOR EACH ROW EXECUTE PROCEDURE f_insertACL();
            </createProcedure>
        </rollback>
    </changeSet>

    <changeSet author="tigran" id="23.1" dbms="postgresql">
        <comment>Prepare t_inodes for whole table update</comment>
        <sql>ALTER TABLE t_inodes SET (fillfactor=45)</sql>

        <!-- enforce rewrite -->
        <sql>CLUSTER t_inodes USING t_inodes_pkey</sql>
        <rollback>
            <sql>ALTER TABLE t_inodes SET (fillfactor=75)</sql>
        </rollback>
    </changeSet>

    <changeSet id="23.2" author="tigran">

        <comment>Add access latency/retention policy columns</comment>

        <addColumn tableName="t_inodes">
            <column name="iaccess_latency" type="TINYINT" remarks="file's access latency">
                <constraints nullable="true"/>
            </column>
            <column name="iretention_policy" type="TINYINT" remarks="file's retention policy">
                <constraints nullable="true"/>
            </column>
        </addColumn>

        <sql>
            UPDATE t_inodes SET iaccess_latency = (select iaccesslatency from t_access_latency where t_inodes.ipnfsid = t_access_latency.ipnfsid),
            iretention_policy = (select iretentionpolicy from t_retention_policy where t_inodes.ipnfsid = t_retention_policy.ipnfsid)
            WHERE itype = 32768;
        </sql>

        <dropTable tableName="t_access_latency"/>
        <dropTable tableName="t_retention_policy"/>

        <rollback>

            <comment>how-to downgrade</comment>

            <createTable tableName="t_access_latency">
                <column name="ipnfsid" type="VARCHAR(36)">
                    <constraints nullable="false" primaryKey="true" primaryKeyName="t_access_latency_pkey"/>
                </column>
                <column name="iaccesslatency" type="INT">
                    <constraints nullable="false"/>
                </column>
            </createTable>

            <createTable tableName="t_retention_policy">
                <column name="ipnfsid" type="VARCHAR(36)">
                    <constraints nullable="false" primaryKey="true" primaryKeyName="t_retention_policy_pkey"/>
                </column>
                <column name="iretentionpolicy" type="INT">
                    <constraints nullable="false"/>
                </column>
            </createTable>

            <addForeignKeyConstraint baseColumnNames="ipnfsid" baseTableName="t_access_latency"
                                 constraintName="t_access_latency_ipnfsid_fkey" deferrable="false"
                                 initiallyDeferred="false" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ipnfsid" referencedTableName="t_inodes"
            />

            <addForeignKeyConstraint baseColumnNames="ipnfsid" baseTableName="t_retention_policy"
                                 constraintName="t_retention_policy_ipnfsid_fkey" deferrable="false"
                                 initiallyDeferred="false" onDelete="CASCADE" onUpdate="NO ACTION"
                                 referencedColumnNames="ipnfsid" referencedTableName="t_inodes"
            />

            <sql>
                INSERT INTO t_access_latency SELECT ipnfsid, iaccess_latency FROM t_inodes where iaccess_latency IS NOT NULL;
                INSERT INTO t_retention_policy SELECT ipnfsid, iretention_policy FROM t_inodes where iretention_policy IS NOT NULL;
            </sql>

            <dropColumn tableName="t_inodes" columnName="iaccess_latency"/>
            <dropColumn tableName="t_inodes" columnName="iretention_policy"/>
        </rollback>
    </changeSet>

    <changeSet author="tigran" id="23.3" dbms="postgresql">
        <comment>Prepare t_inodes for whole table update</comment>
        <sql>ALTER TABLE t_inodes SET (fillfactor=75)</sql>
        <rollback />
    </changeSet>

    <changeSet id="21" author="tigran">

        <comment>Remove address mask from ACL</comment>

        <dropColumn tableName="t_acl" columnName="address_msk"/>

        <rollback>
            <addColumn tableName="t_acl">
                <column name="address_msk" type="VARCHAR(32)" defaultValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" remarks="network address mask">
                    <constraints nullable="false"/>
                </column>
            </addColumn>
        </rollback>
    </changeSet>

    <changeSet author="litvinse" id="24.1" dbms="postgresql">
      <comment>Fix trigger on insert or update on t_level_4</comment>
	<createProcedure>
	  DROP TRIGGER IF EXISTS tgr_enstore_location ON t_level_4;

	  CREATE OR REPLACE FUNCTION f_enstorelevel2locationinfo() RETURNS TRIGGER
	  AS $$
	  DECLARE
	    l_entries text[];
            location text;
	    file_data varchar;
	  BEGIN
	    IF (TG_OP = 'INSERT') THEN
              location := f_enstore2uri(encode(NEW.ifiledata,'escape'));
	      IF location IS NULL THEN
	        -- encp only creates empty layer 4 file
	        -- so NEW.ifiledata is null
	        INSERT INTO t_locationinfo VALUES (NEW.ipnfsid,0,'enstore:',10,NOW(),NOW(),1);
	        INSERT INTO t_storageinfo
		   VALUES (NEW.ipnfsid,'enstore','enstore','enstore');
	      ELSE
                l_entries = string_to_array(encode(NEW.ifiledata,'escape'), E'\n');
	        INSERT INTO t_locationinfo VALUES (NEW.ipnfsid,0,location,10,NOW(),NOW(),1);
	        INSERT INTO t_storageinfo
		   VALUES (NEW.ipnfsid,'enstore','enstore',l_entries[4]);
              END IF;
	       --
               -- we assume all files coming through level4 to be CUSTODIAL-NEARLINE
	       --
               -- the block below is needed for files written directly by encp
               --
	      BEGIN
                UPDATE t_inodes SET iaccess_latency = 0, iretention_policy = 0 WHERE ipnfsid = NEW.ipnfsid;
	      END;
	    ELSEIF (TG_OP = 'UPDATE')  THEN
	      file_data := encode(NEW.ifiledata, 'escape');
              IF ( file_data = E'\n') THEN
	        UPDATE t_locationinfo SET ilocation = file_data
                  WHERE ipnfsid = NEW.ipnfsid and itype=0;
              ELSE
	        location := f_enstore2uri(file_data);
                IF location IS NOT NULL THEN
	          UPDATE t_locationinfo
		    SET ilocation = f_enstore2uri(file_data)
                    WHERE ipnfsid = NEW.ipnfsid and itype=0;
                  l_entries = string_to_array(file_data, E'\n');
	          UPDATE t_storageinfo SET istoragesubgroup=l_entries[4]
	            WHERE  ipnfsid = NEW.ipnfsid;
                END IF;
              END IF;
            END IF;
            RETURN NEW;
          END;
	  $$
	  LANGUAGE plpgsql;
	  CREATE TRIGGER tgr_enstore_location BEFORE INSERT OR UPDATE ON t_level_4
	    FOR EACH ROW EXECUTE PROCEDURE f_enstorelevel2locationinfo();
        </createProcedure>

        <rollback>
            <createProcedure>
              DROP TRIGGER IF EXISTS tgr_enstore_location ON t_level_4;

              CREATE OR REPLACE FUNCTION f_enstorelevel2locationinfo() RETURNS TRIGGER
              AS $$
              DECLARE
                l_entries text[];
                location text;
                file_data varchar;
              BEGIN
                IF (TG_OP = 'INSERT') THEN
                  location := f_enstore2uri(encode(NEW.ifiledata,'escape'));
                  IF location IS NULL THEN
                    -- encp only creates empty layer 4 file
                    -- so NEW.ifiledata is null
                    INSERT INTO t_locationinfo VALUES (NEW.ipnfsid,0,'enstore:',10,NOW(),NOW(),1);
                    INSERT INTO t_storageinfo
                       VALUES (NEW.ipnfsid,'enstore','enstore','enstore');
                  ELSE
                    l_entries = string_to_array(encode(NEW.ifiledata,'escape'), E'\n');
                    INSERT INTO t_locationinfo VALUES (NEW.ipnfsid,0,location,10,NOW(),NOW(),1);
                    INSERT INTO t_storageinfo
                       VALUES (NEW.ipnfsid,'enstore','enstore',l_entries[4]);
                  END IF;
                   --
                   -- we assume all files coming through level4 to be CUSTODIAL-NEARLINE
                   --
                   -- the block below is needed for files written directly by encp
                   --
                  BEGIN
                    INSERT INTO t_access_latency VALUES (NEW.ipnfsid, 0);
                    EXCEPTION WHEN unique_violation THEN
                      RAISE NOTICE 't_access_latency already exists %',NEW.ipnfsid;
                  END;
                  BEGIN
                    INSERT INTO t_retention_policy VALUES (NEW.ipnfsid, 0);
                    EXCEPTION WHEN unique_violation THEN
                      RAISE NOTICE 't_retention_policy  exists %',NEW.ipnfsid;
                  END;
                ELSEIF (TG_OP = 'UPDATE')  THEN
                  file_data := encode(NEW.ifiledata, 'escape');
                  IF ( file_data = E'\n') THEN
                    UPDATE t_locationinfo SET ilocation = file_data
                      WHERE ipnfsid = NEW.ipnfsid and itype=0;
                  ELSE
                    location := f_enstore2uri(file_data);
                    IF location IS NOT NULL THEN
                      UPDATE t_locationinfo
                        SET ilocation = f_enstore2uri(file_data)
                        WHERE ipnfsid = NEW.ipnfsid and itype=0;
                      l_entries = string_to_array(file_data, E'\n');
                      UPDATE t_storageinfo SET istoragesubgroup=l_entries[4]
                        WHERE  ipnfsid = NEW.ipnfsid;
                    END IF;
                  END IF;
                END IF;
                RETURN NEW;
              END;
              $$
              LANGUAGE plpgsql;
              CREATE TRIGGER tgr_enstore_location BEFORE INSERT OR UPDATE ON t_level_4
                FOR EACH ROW EXECUTE PROCEDURE f_enstorelevel2locationinfo();
            </createProcedure>
        </rollback>
    </changeSet>

    <changeSet author="behrmann" id="4.1">
        <sql>
            DELETE FROM t_dirs WHERE iname IN ('.', '..')
        </sql>

        <rollback>
            <sql>
                INSERT INTO t_dirs (iparent, iname, ipnfsid) SELECT i.ipnfsid, '..', d.iparent FROM t_dirs d JOIN t_inodes i ON d.ipnfsid = i.ipnfsid WHERE i.itype = 16384
            </sql>
            <sql>
                INSERT INTO t_dirs (iparent, iname, ipnfsid) SELECT ipnfsid, '.', ipnfsid FROM t_inodes WHERE itype = 16384
            </sql>
        </rollback>
    </changeSet>

    <changeSet author="behrmann" id="5" dbms="postgresql">
        <comment>use encode on bytea field</comment>
        <createProcedure>
            CREATE OR REPLACE FUNCTION path2inode(root varchar, path varchar) RETURNS varchar AS $$
            DECLARE
                id varchar := root;
                elements varchar[] := string_to_array(path, '/');
                child varchar;
                itype INT;
                link varchar;
            BEGIN
                FOR i IN 1..array_upper(elements,1) LOOP
                    CASE
                    WHEN elements[i] = '.' THEN
                        child := id;
                    WHEN elements[i] = '..' THEN
                        IF id = '000000000000000000000000000000000000' THEN
                            child := id;
                        ELSE
                            SELECT iparent INTO child FROM t_dirs WHERE ipnfsid=id;
                        END IF;
                    ELSE
                        SELECT dir.ipnfsid, inode.itype INTO child, itype FROM t_dirs dir, t_inodes inode WHERE dir.ipnfsid = inode.ipnfsid AND dir.iparent=id AND dir.iname=elements[i];
                        IF itype=40960 THEN
                            SELECT encode(ifiledata,'escape') INTO link FROM t_inodes_data WHERE ipnfsid=child;
                            IF link LIKE '/%' THEN
                                child := path2inode('000000000000000000000000000000000000', substring(link from 2));
                            ELSE
                                child := path2inode(id, link);
                            END IF;
                        END IF;
                    END CASE;
                    IF child IS NULL THEN
                        RETURN NULL;
                    END IF;
                    id := child;
                END LOOP;
                RETURN id;
            END;
            $$ LANGUAGE plpgsql;
        </createProcedure>
        <rollback>
           <createProcedure>
            CREATE OR REPLACE FUNCTION
            path2inode(root varchar, path varchar)
            RETURNS varchar AS $$
                DECLARE
                    id varchar := root;
                    elements varchar[] := string_to_array(path, '/');
                    child varchar;
                    itype INT;
                    link varchar;
                BEGIN
                    FOR i IN 1..array_upper(elements,1) LOOP
                        SELECT dir.ipnfsid, inode.itype INTO child, itype FROM t_dirs dir, t_inodes inode WHERE dir.ipnfsid = inode.ipnfsid AND dir.iparent=id AND dir.iname=elements[i];
                        IF itype=40960 THEN
                           SELECT encode(ifiledata,'escape') INTO link FROM t_inodes_data WHERE ipnfsid=child;
                           IF link LIKE '/%' THEN
                              child := path2inode('000000000000000000000000000000000000',
                                                   substring(link from 2));
                           ELSE
                              child := path2inode(id, link);
                           END IF;
                        END IF;
                        IF child IS NULL THEN
                           RETURN NULL;
                        END IF;
                        id := child;
                    END LOOP;
                    RETURN id;
                END;
                $$ LANGUAGE plpgsql;
           </createProcedure>
        </rollback>
    </changeSet>

    <changeSet author="behrmann" id="6.1" dbms="postgresql">
        <createProcedure>
            CREATE OR REPLACE FUNCTION
                path2inodes(root varchar, path varchar, OUT inode t_inodes)
                RETURNS SETOF t_inodes AS $$
            DECLARE
                dir varchar;
                elements text[] := string_to_array(path, '/');
                inodes t_inodes[];
                link varchar;
            BEGIN
                -- Find the inode of the root
                SELECT * INTO inode FROM t_inodes WHERE ipnfsid = root;
                IF NOT FOUND THEN
                    RETURN;
                END IF;

                -- We build an array of the inodes for the path
                inodes := ARRAY[inode];

                -- For each path element
                FOR i IN 1..array_upper(elements,1) LOOP
                    -- Return empty set if not a directory
                    IF inode.itype != 16384 THEN
                        RETURN;
                    END IF;

                    -- The PNFS ID of the directory
                    dir := inode.ipnfsid;

                    -- Lookup the next path element
                    CASE
                    WHEN elements[i] = '.' THEN
                        CONTINUE;
                    WHEN elements[i] = '..' THEN
                        IF dir = '000000000000000000000000000000000000' THEN
                            CONTINUE;
                        ELSE
                            SELECT t_inodes.* INTO inode
                                FROM t_inodes, t_dirs
                                WHERE t_inodes.ipnfsid = t_dirs.iparent
                                        AND t_dirs.ipnfsid = dir;
                        END IF;
                    ELSE
                        SELECT t_inodes.* INTO inode
                            FROM t_inodes, t_dirs
                            WHERE t_inodes.ipnfsid = t_dirs.ipnfsid
                                    AND t_dirs.iparent = dir AND iname = elements[i];
                    END CASE;

                    -- Return the empty set if not found
                    IF NOT FOUND THEN
                        RETURN;
                    END IF;

                    -- Append the inode to the result set
                    inodes := array_append(inodes, inode);

                    -- If inode is a symbolic link
                    IF inode.itype = 40960 THEN
                        -- Read the link
                        SELECT encode(ifiledata,'escape') INTO STRICT link
                            FROM t_inodes_data WHERE ipnfsid = inode.ipnfsid;

                        -- If absolute path then resolve from the file system root
                        IF link LIKE '/%' THEN
                            dir := '000000000000000000000000000000000000';
                            link := substring(link from 2);

                            -- Call recursively and add inodes to result set
                            FOR inode IN SELECT * FROM path2inodes(dir, link) LOOP
                                inodes := array_append(inodes, inode);
                            END LOOP;
                        ELSE
                            -- Call recursively and add inodes to result set; skip
                            -- first inode as it is the inode of dir
                            FOR inode IN SELECT * FROM path2inodes(dir, link) OFFSET 1 LOOP
                                inodes := array_append(inodes, inode);
                            END LOOP;
                        END IF;

                        -- Return empty set if link could not be resolved
                        IF NOT FOUND THEN
                            RETURN;
                        END IF;

                        -- Continue from the inode pointed to by the link
                        inode = inodes[array_upper(inodes,1)];
                    END IF;
                END LOOP;

                -- Output all inodes
                FOR i IN 1..array_upper(inodes,1) LOOP
                    inode := inodes[i];
                    RETURN NEXT;
                END LOOP;
            END;
            $$ LANGUAGE plpgsql;
        </createProcedure>
        <rollback>
           <createProcedure>
                CREATE OR REPLACE FUNCTION
                    path2inodes(root varchar, path varchar, OUT inode t_inodes)
                    RETURNS SETOF t_inodes AS $$
                    DECLARE
                        dir varchar;
                        elements text[] := string_to_array(path, '/');
                        inodes t_inodes[];
                        link varchar;
                    BEGIN
                        -- Find the inode of the root
                        SELECT * INTO inode FROM t_inodes WHERE ipnfsid = root;
                        IF NOT FOUND THEN
                           RETURN;
                        END IF;

                        -- We build an array of the inodes for the path
                        inodes := ARRAY[inode];

                        -- For each path element
                        FOR i IN 1..array_upper(elements,1) LOOP
                             -- Return empty set if not a directory
                            IF inode.itype != 16384 THEN
                                RETURN;
                            END IF;

                            -- The PNFS ID of the directory
                            dir := inode.ipnfsid;

                            -- Lookup the next path element
                            SELECT t_inodes.* INTO inode
                            FROM t_inodes, t_dirs
                            WHERE t_inodes.ipnfsid = t_dirs.ipnfsid
                                    AND t_dirs.iparent = dir AND iname = elements[i];

                            -- Return the empty set if not found
                            IF NOT FOUND THEN
                               RETURN;
                            END IF;

                            -- Append the inode to the result set
                            inodes := array_append(inodes, inode);

                            -- If inode is a symbolic link
                            IF inode.itype = 40960 THEN
                               -- Read the link
                               SELECT encode(ifiledata,'escape') INTO STRICT link
                               FROM t_inodes_data WHERE ipnfsid = inode.ipnfsid;

                               -- If absolute path then resolve from the file system root
                               IF link LIKE '/%' THEN
                                  dir  := '000000000000000000000000000000000000';
                                  link := substring(link from 2);

                                  -- Call recursively and add inodes to result set
                                  FOR inode IN SELECT * FROM path2inodes(dir, link) LOOP
                                      inodes := array_append(inodes, inode);
                                  END LOOP;
                               ELSE
                               -- Call recursively and add inodes to result set; skip
                               -- first inode as it is the inode of dir
                                  FOR inode IN SELECT * FROM path2inodes(dir, link) OFFSET 1 LOOP
                                    inodes := array_append(inodes, inode);
                                  END LOOP;
                               END IF;

                               -- Return empty set if link could not be resolved
                               IF NOT FOUND THEN
                                  RETURN;
                               END IF;

                               -- Continue from the inode pointed to by the link
                               inode = inodes[array_upper(inodes,1)];
                            END IF;
                        END LOOP;

                        -- Output all inodes
                        FOR i IN 1..array_upper(inodes,1) LOOP
                            inode := inodes[i];
                            RETURN NEXT;
                        END LOOP;
                END;
                $$ LANGUAGE plpgsql;
           </createProcedure>
        </rollback>
    </changeSet>

    <changeSet author="behrmann" id="7" dbms="postgresql">
        <createProcedure procedureName="f_create_inode">
            CREATE OR REPLACE FUNCTION f_create_inode(parent varchar, name varchar, id varchar, type integer, mode integer, nlink integer, uid integer, gid int, size bigint, io integer, now timestamp) RETURNS void AS $$
            BEGIN
                INSERT INTO t_inodes VALUES (id,type,mode,nlink,uid,gid,size,io,now,now,now,now,0);
                INSERT INTO t_dirs VALUES (parent, name, id);
                UPDATE t_inodes SET inlink=inlink+1,imtime=now,ictime=now,igeneration=igeneration+1 WHERE ipnfsid=parent;
            END;
            $$ LANGUAGE plpgsql;
        </createProcedure>

        <rollback>
            <sql>
               DROP FUNCTION IF EXISTS f_create_inode(parent varchar, name varchar, id varchar, type integer, mode integer, nlink integer, uid integer, gid int, size bigint, io integer, now timestamp);
            </sql>
        </rollback>
    </changeSet>



    <changeSet author="behrmann" id="8">
        <comment>Change type of itagid to auto incrementing bigint</comment>

        <createTable tableName="t_tags2">
            <column name="ipnfsid" type="VARCHAR(36)">
                <constraints nullable="false"/>
            </column>
            <column name="itagname" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="itagid" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="isorign" type="INT">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <createTable tableName="t_tags_inodes2">
            <column name="itagid" type="bigint" autoIncrement="true">
                <constraints nullable="false"/>
            </column>
            <column name="itagid_old" type="varchar(36)">
                <constraints nullable="false"/>
            </column>
            <column name="imode" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="inlink" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="iuid" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="igid" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="isize" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="ictime" type="DATETIME">
                <constraints nullable="false"/>
            </column>
            <column name="iatime" type="DATETIME">
                <constraints nullable="false"/>
            </column>
            <column name="imtime" type="DATETIME">
                <constraints nullable="false"/>
            </column>
            <column name="ivalue" type="${blob.type}"/>
        </createTable>

        <sql>
            INSERT INTO t_tags_inodes2 (itagid_old, imode, inlink, iuid, igid, isize, ictime, iatime, imtime, ivalue)
                   SELECT itagid, imode, inlink, iuid, igid, isize, ictime, iatime, imtime, ivalue FROM t_tags_inodes
        </sql>

        <sql dbms="postgresql">
            ANALYZE t_tags_inodes2
        </sql>

        <sql>
            INSERT INTO t_tags2 (ipnfsid, itagname, itagid, isorign)
                   SELECT ipnfsid, itagname, i.itagid, isorign FROM t_tags t JOIN t_tags_inodes2 i ON t.itagid = i.itagid_old
        </sql>

        <sql dbms="postgresql">
            ANALYZE t_tags2
        </sql>

        <dropColumn tableName="t_tags_inodes2" columnName="itagid_old"/>

        <dropTable tableName="t_tags"/>
        <dropTable tableName="t_tags_inodes"/>

        <renameTable oldTableName="t_tags2" newTableName="t_tags"/>
        <renameTable oldTableName="t_tags_inodes2" newTableName="t_tags_inodes"/>

        <addPrimaryKey columnNames="itagid" constraintName="t_tags_inodes_pkey" tableName="t_tags_inodes"/>
        <addPrimaryKey columnNames="ipnfsid, itagname" constraintName="t_tags_pkey" tableName="t_tags"/>

        <createIndex tableName="t_tags" indexName="i_tags_itagid">
            <column name="itagid"/>
        </createIndex>

        <addForeignKeyConstraint baseColumnNames="itagid" baseTableName="t_tags"
                                 constraintName="t_tags_itagid_fkey"
                                 deferrable="false"
                                 initiallyDeferred="false"
                                 onDelete="NO ACTION"
                                 onUpdate="CASCADE"
                                 referencedColumnNames="itagid"
                                 referencedTableName="t_tags_inodes"
                />

        <addForeignKeyConstraint baseColumnNames="ipnfsid" baseTableName="t_tags"
                                 constraintName="t_tags_ipnfsid_fkey"
                                 deferrable="false"
                                 initiallyDeferred="false"
                                 onDelete="NO ACTION"
                                 onUpdate="NO ACTION"
                                 referencedColumnNames="ipnfsid"
                                 referencedTableName="t_inodes"
                />

        <rollback>
            <createTable tableName="t_tags2">
                <column name="ipnfsid" type="VARCHAR(36)">
                    <constraints nullable="false"/>
                </column>
                <column name="itagname" type="VARCHAR(255)">
                    <constraints nullable="false"/>
                </column>
                <column name="itagid" type="VARCHAR(36)">
                    <constraints nullable="false"/>
                </column>
                <column name="isorign" type="INT">
                    <constraints nullable="false"/>
                </column>
            </createTable>

            <createTable tableName="t_tags_inodes2">
                <column name="itagid" type="VARCHAR(36)">
                    <constraints nullable="false"/>
                </column>
                <column name="itagid_old" type="bigint">
                    <constraints nullable="false"/>
                </column>
                <column name="imode" type="INT">
                    <constraints nullable="false"/>
                </column>
                <column name="inlink" type="INT">
                    <constraints nullable="false"/>
                </column>
                <column name="iuid" type="INT">
                    <constraints nullable="false"/>
                </column>
                <column name="igid" type="INT">
                    <constraints nullable="false"/>
                </column>
                <column name="isize" type="INT">
                    <constraints nullable="false"/>
                </column>
                <column name="ictime" type="DATETIME">
                    <constraints nullable="false"/>
                </column>
                <column name="iatime" type="DATETIME">
                    <constraints nullable="false"/>
                </column>
                <column name="imtime" type="DATETIME">
                    <constraints nullable="false"/>
                </column>
                <column name="ivalue" type="${blob.type}"/>
            </createTable>

            <sql>
                INSERT INTO t_tags_inodes2 (itagid, itagid_old, imode, inlink, iuid, igid, isize, ictime, iatime, imtime, ivalue)
                       SELECT CAST (itagid AS VARCHAR(36)), itagid, imode, inlink, iuid, igid, isize, ictime, iatime, imtime, ivalue FROM t_tags_inodes
            </sql>

            <sql dbms="postgresql">
                ANALYZE t_tags_inodes2
            </sql>

            <sql>
                INSERT INTO t_tags2 (ipnfsid, itagname, itagid, isorign)
                       SELECT ipnfsid, itagname, i.itagid, isorign FROM t_tags t JOIN t_tags_inodes2 i ON t.itagid = i.itagid_old
            </sql>

            <sql dbms="postgresql">
                ANALYZE t_tags2
            </sql>


            <dropColumn tableName="t_tags_inodes2" columnName="itagid_old"/>

            <dropTable tableName="t_tags"/>
            <dropTable tableName="t_tags_inodes"/>

            <renameTable oldTableName="t_tags2" newTableName="t_tags"/>
            <renameTable oldTableName="t_tags_inodes2" newTableName="t_tags_inodes"/>

            <addPrimaryKey columnNames="itagid" constraintName="t_tags_inodes_pkey" tableName="t_tags_inodes"/>
            <addPrimaryKey columnNames="ipnfsid, itagname" constraintName="t_tags_pkey" tableName="t_tags"/>

            <createIndex tableName="t_tags" indexName="i_tags_itagid">
                <column name="itagid"/>
            </createIndex>

            <addForeignKeyConstraint baseColumnNames="itagid" baseTableName="t_tags"
                                     constraintName="t_tags_itagid_fkey"
                                     deferrable="false"
                                     initiallyDeferred="false"
                                     onDelete="NO ACTION"
                                     onUpdate="NO ACTION"
                                     referencedColumnNames="itagid"
                                     referencedTableName="t_tags_inodes"
                    />

            <addForeignKeyConstraint baseColumnNames="ipnfsid" baseTableName="t_tags"
                                     constraintName="t_tags_ipnfsid_fkey"
                                     deferrable="false"
                                     initiallyDeferred="false"
                                     onDelete="NO ACTION"
                                     onUpdate="NO ACTION"
                                     referencedColumnNames="ipnfsid"
                                     referencedTableName="t_inodes"
                    />
        </rollback>
    </changeSet>
</databaseChangeLog>
